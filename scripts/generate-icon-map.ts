// pnpm exec ts-node --skip-project scripts/generate-icon-map.ts
// convert hint: convert iso-g-code.png -resize x128 iso-g-code.png
// https://stackoverflow.com/questions/11233498/json-stringify-without-quotes-on-properties

// import sizeOf from "image-size";
import { imageSizeFromFile } from "image-size/fromFile";

import { getRatio } from "@/lib/get-ratio";

import { type IconsMap } from "../interfaces/IconsMap";

import fs from "fs";
import path from "path";

const iconsDir = "./public/assets/icons";
const iconsDirPath = path.join(process.cwd(), iconsDir);
const iconsDirContent = fs.readdirSync(iconsDirPath);
const iconsSubDirs = iconsDirContent
  .filter((item) => fs.statSync(path.join(iconsDirPath, item)).isDirectory())
  .map((item) => path.join(iconsDir, item));

const generateIconsMap = async (dir: string): Promise<IconsMap> => {
  const directoryPath = path.join(process.cwd(), dir);
  const baseDirName = path.basename(directoryPath);

  const files = fs
    .readdirSync(directoryPath)
    .filter((file) => file.endsWith(".svg") || file.endsWith(".png") || file.endsWith(".webp"));

  const icons: IconsMap = {};

  await Promise.all(
    files.map(async (fileName) => {
      const info = (await imageSizeFromFile(
        path.join(directoryPath, fileName)
      )) as IconsMap[string]["info"];

      info.ratio = getRatio(info);

      const filePath = path.join(dir, fileName).replace(/^public/, "");

      const baseName = path
        .parse(fileName)
        .name.replace(/-light|-dark$/, "")
        .replace(/\s+/g, ""); // .replace(/(\s+|_|-)/g, "");

      const iconName = directoryPath === iconsDirPath ? baseName : baseDirName + "_" + baseName;

      if (!icons[iconName]) {
        icons[iconName] = {
          name: iconName,
          uri: { light: null, dark: null },
          info,
        } as unknown as IconsMap[string];
      }

      if (fileName.includes("-light")) {
        icons[iconName].uri.light = filePath;
      } else {
        icons[iconName].uri.dark = filePath;
      }

      if (!icons[iconName].uri.light) {
        icons[iconName].uri.light = filePath;
      }

      if (!icons[iconName].uri.dark) {
        icons[iconName].uri.dark = filePath;
      }
    })
  );

  return icons;
};

void (async () => {
  let iconMap: IconsMap = {};

  await Promise.all(
    [...iconsSubDirs, iconsDir].map(async (dir) => {
      const iconsMap = await generateIconsMap(dir);

      iconMap = { ...iconMap, ...iconsMap };
    })
  );

  fs.writeFileSync(
    `${iconsDir}/index.ts`,
    "// This file is generated by scripts/generate-icon-map.ts\n\n" +
      `const iconsMap = ${JSON.stringify(iconMap, null, "\t")
        .replace(/"([a-zA-Z_$][0-9a-zA-Z_$]*)":/g, "$1:")
        .replace(/("|}|]|\d+)(?:\n)/g, "$1,\n")};` +
      "\n\nexport default iconsMap;" +
      "\n\nexport type IconsMapItem = keyof typeof iconsMap;\n"
  );
})();
